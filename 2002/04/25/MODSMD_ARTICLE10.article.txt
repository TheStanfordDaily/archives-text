# Let your computer serve you
## 
### SURYA SINGH CONTRIBUTING WRITER 
With the increasing speed of PCs, it is
now feasible to use a PC as a small personal
server, especially for sharing data and pro
grams across the network. Through the
clever use of a variety of freely available
tools, many originally from the Unix do
main, it is possible to easily configure a per
sonal computer for remote access.
However, this utility has increased the
necessity to secure network access. As a re
sult, many Leland system computers, for
example, are protected against unsecured
logins.
Most traditional programs for remote
control and data exchange, such as Tel
net, File Transfer Protocol and NetBIOS
— which is much like Windows Network
ing — send data in a standard format,
usually by TCP / IP networking.
With this system, however, anyone lis
tening or "packet sniffing" on the network
can intercept the data communications. In
particular, they can capture user names
and passwords that can later be used fora
variety of purposes, most of which are not
condoned by the University.
Packet sniffing for passwords is difficult
to do manually for extended periods of
time. However, it can easily be automated,
especially on a large and open network such
as that at Stanford. It is almost certain that
one of these tools is operating at all times, es
pecially at commonly accessed network
points such as a main campus router.
Traditional programs are usually unen
crypted, which means that login information
cannot be decoded even if it is intercepted.
For the slightly paranoid user, it is inter
esting to note that the network connection is
still visible and quite a sufficient amount of
data can be gleaned from this alone. That is,
with an encrypted connection, it is still feasi
ble to determine where network traffic is

taking place and what type of service is
being used, even though the actual data is
inaccessible.
There are numerous technologies for
addressing this issue, but a popular solution
for secure data exchange is the Secure Shell
standard. Like encrypted communications,
this widely available tool allows for com
pression of data and tunneling. The tunnel
ing of information allows fora variety of ap
plications, including encrypted file transfer.
Also, it is not exceptionally difficult to
setup and administer Secure Shell from a
PC. If you are running Linux or any other
Unix program, including MacOS X, then
this is simply a matter of enabling the Se
cure Shell Daemon, a software program.
For more information on which flavors
of Unix are also supported, visit the
OpenSSH (a freely available server) page
at www.openssh.com/portable.html.
If you are using Windows NT or its deriv
atives such as Windows 2000 and Windows
XP, SSH can be enabled through OpenSSH
for Windows, available at www.networksim
plicity.com/openssn/.
After you have obtained and installed
the server, a few things are important to
note. First, OpenSSH for Windows is a
port of a Unix application and still has a
few Unix-like quirks. For example, the
server will need a password file. However,
the package does come with two utilities to
make creating files easier.
Also, Secure Shell will provide terminal
services, such as a command prompt, to an
authenticated user. Thus, it might be use
ful to create a dedicated user and poten
tially restricted user account for use with
the server. Even if the login becomes com
promised, it will have limited access.
Several clients for using Secure Shell in
Windows and other operating systems are
available. A comprehensive list is given at
openssh.linux.it/windows.html. Many are
freely available, such as TeraTerm SSH.
With the increasing speed of PCs, it is
now feasible to use a PC as a small personal
server, especially for sharing data and pro
grams across the network. Through the
clever use of a variety of freely available
tools, many originally from the Unix do
main, it is possible to easily configure a per
sonal computer for remote access.
However, this utility has increased the
necessity to secure network access. As a re
sult, many Leland system computers, for
example, are protected against unsecured
logins.
Most traditional programs for remote
control and data exchange, such as Tel
net, File Transfer Protocol and NetBIOS
— which is much like Windows Network
ing — send data in a standard format,
usually by TCP / IP networking.
With this system, however, anyone lis
tening or "packet sniffing" on the network
can intercept the data communications. In
particular, they can capture user names
and passwords that can later be used fora
variety of purposes, most of which are not
condoned by the University.
Packet sniffing for passwords is difficult
to do manually for extended periods of
time. However, it can easily be automated,
especially on a large and open network such
as that at Stanford. It is almost certain that
one of these tools is operating at all times, es
pecially at commonly accessed network
points such as a main campus router.
Traditional programs are usually unen
crypted, which means that login information
cannot be decoded even if it is intercepted.
For the slightly paranoid user, it is inter
esting to note that the network connection is
still visible and quite a sufficient amount of
data can be gleaned from this alone. That is,
with an encrypted connection, it is still feasi
ble to determine where network traffic is

taking place and what type of service is
being used, even though the actual data is
inaccessible.
There are numerous technologies for
addressing this issue, but a popular solution
for secure data exchange is the Secure Shell
standard. Like encrypted communications,
this widely available tool allows for com
pression of data and tunneling. The tunnel
ing of information allows fora variety of ap
plications, including encrypted file transfer.
Also, it is not exceptionally difficult to
setup and administer Secure Shell from a
PC. If you are running Linux or any other
Unix program, including MacOS X, then
this is simply a matter of enabling the Se
cure Shell Daemon, a software program.
For more information on which flavors
of Unix are also supported, visit the
OpenSSH (a freely available server) page
at www.openssh.com/portable.html.
If you are using Windows NT or its deriv
atives such as Windows 2000 and Windows
XP, SSH can be enabled through OpenSSH
for Windows, available at www.networksim
plicity.com/openssn/.
After you have obtained and installed
the server, a few things are important to
note. First, OpenSSH for Windows is a
port of a Unix application and still has a
few Unix-like quirks. For example, the
server will need a password file. However,
the package does come with two utilities to
make creating files easier.
Also, Secure Shell will provide terminal
services, such as a command prompt, to an
authenticated user. Thus, it might be use
ful to create a dedicated user and poten
tially restricted user account for use with
the server. Even if the login becomes com
promised, it will have limited access.
Several clients for using Secure Shell in
Windows and other operating systems are
available. A comprehensive list is given at
openssh.linux.it/windows.html. Many are
freely available, such as TeraTerm SSH.
With the increasing speed of PCs, it is
now feasible to use a PC as a small personal
server, especially for sharing data and pro
grams across the network. Through the
clever use of a variety of freely available
tools, many originally from the Unix do
main, it is possible to easily configure a per
sonal computer for remote access.
However, this utility has increased the
necessity to secure network access. As a re
sult, many Leland system computers, for
example, are protected against unsecured
logins.
Most traditional programs for remote
control and data exchange, such as Tel
net, File Transfer Protocol and NetBIOS
— which is much like Windows Network
ing — send data in a standard format,
usually by TCP / IP networking.
With this system, however, anyone lis
tening or "packet sniffing" on the network
can intercept the data communications. In
particular, they can capture user names
and passwords that can later be used fora
variety of purposes, most of which are not
condoned by the University.
Packet sniffing for passwords is difficult
to do manually for extended periods of
time. However, it can easily be automated,
especially on a large and open network such
as that at Stanford. It is almost certain that
one of these tools is operating at all times, es
pecially at commonly accessed network
points such as a main campus router.
Traditional programs are usually unen
crypted, which means that login information
cannot be decoded even if it is intercepted.
For the slightly paranoid user, it is inter
esting to note that the network connection is
still visible and quite a sufficient amount of
data can be gleaned from this alone. That is,
with an encrypted connection, it is still feasi
ble to determine where network traffic is

taking place and what type of service is
being used, even though the actual data is
inaccessible.
There are numerous technologies for
addressing this issue, but a popular solution
for secure data exchange is the Secure Shell
standard. Like encrypted communications,
this widely available tool allows for com
pression of data and tunneling. The tunnel
ing of information allows fora variety of ap
plications, including encrypted file transfer.
Also, it is not exceptionally difficult to
setup and administer Secure Shell from a
PC. If you are running Linux or any other
Unix program, including MacOS X, then
this is simply a matter of enabling the Se
cure Shell Daemon, a software program.
For more information on which flavors
of Unix are also supported, visit the
OpenSSH (a freely available server) page
at www.openssh.com/portable.html.
If you are using Windows NT or its deriv
atives such as Windows 2000 and Windows
XP, SSH can be enabled through OpenSSH
for Windows, available at www.networksim
plicity.com/openssn/.
After you have obtained and installed
the server, a few things are important to
note. First, OpenSSH for Windows is a
port of a Unix application and still has a
few Unix-like quirks. For example, the
server will need a password file. However,
the package does come with two utilities to
make creating files easier.
Also, Secure Shell will provide terminal
services, such as a command prompt, to an
authenticated user. Thus, it might be use
ful to create a dedicated user and poten
tially restricted user account for use with
the server. Even if the login becomes com
promised, it will have limited access.
Several clients for using Secure Shell in
Windows and other operating systems are
available. A comprehensive list is given at
openssh.linux.it/windows.html. Many are
freely available, such as TeraTerm SSH.
With the increasing speed of PCs, it is
now feasible to use a PC as a small personal
server, especially for sharing data and pro
grams across the network. Through the
clever use of a variety of freely available
tools, many originally from the Unix do
main, it is possible to easily configure a per
sonal computer for remote access.
However, this utility has increased the
necessity to secure network access. As a re
sult, many Leland system computers, for
example, are protected against unsecured
logins.
Most traditional programs for remote
control and data exchange, such as Tel
net, File Transfer Protocol and NetBIOS
— which is much like Windows Network
ing — send data in a standard format,
usually by TCP / IP networking.
With this system, however, anyone lis
tening or "packet sniffing" on the network
can intercept the data communications. In
particular, they can capture user names
and passwords that can later be used fora
variety of purposes, most of which are not
condoned by the University.
Packet sniffing for passwords is difficult
to do manually for extended periods of
time. However, it can easily be automated,
especially on a large and open network such
as that at Stanford. It is almost certain that
one of these tools is operating at all times, es
pecially at commonly accessed network
points such as a main campus router.
Traditional programs are usually unen
crypted, which means that login information
cannot be decoded even if it is intercepted.
For the slightly paranoid user, it is inter
esting to note that the network connection is
still visible and quite a sufficient amount of
data can be gleaned from this alone. That is,
with an encrypted connection, it is still feasi
ble to determine where network traffic is

taking place and what type of service is
being used, even though the actual data is
inaccessible.
There are numerous technologies for
addressing this issue, but a popular solution
for secure data exchange is the Secure Shell
standard. Like encrypted communications,
this widely available tool allows for com
pression of data and tunneling. The tunnel
ing of information allows fora variety of ap
plications, including encrypted file transfer.
Also, it is not exceptionally difficult to
setup and administer Secure Shell from a
PC. If you are running Linux or any other
Unix program, including MacOS X, then
this is simply a matter of enabling the Se
cure Shell Daemon, a software program.
For more information on which flavors
of Unix are also supported, visit the
OpenSSH (a freely available server) page
at www.openssh.com/portable.html.
If you are using Windows NT or its deriv
atives such as Windows 2000 and Windows
XP, SSH can be enabled through OpenSSH
for Windows, available at www.networksim
plicity.com/openssn/.
After you have obtained and installed
the server, a few things are important to
note. First, OpenSSH for Windows is a
port of a Unix application and still has a
few Unix-like quirks. For example, the
server will need a password file. However,
the package does come with two utilities to
make creating files easier.
Also, Secure Shell will provide terminal
services, such as a command prompt, to an
authenticated user. Thus, it might be use
ful to create a dedicated user and poten
tially restricted user account for use with
the server. Even if the login becomes com
promised, it will have limited access.
Several clients for using Secure Shell in
Windows and other operating systems are
available. A comprehensive list is given at
openssh.linux.it/windows.html. Many are
freely available, such as TeraTerm SSH.
With the increasing speed of PCs, it is
now feasible to use a PC as a small personal
server, especially for sharing data and pro
grams across the network. Through the
clever use of a variety of freely available
tools, many originally from the Unix do
main, it is possible to easily configure a per
sonal computer for remote access.
However, this utility has increased the
necessity to secure network access. As a re
sult, many Leland system computers, for
example, are protected against unsecured
logins.
Most traditional programs for remote
control and data exchange, such as Tel
net, File Transfer Protocol and NetBIOS
— which is much like Windows Network
ing — send data in a standard format,
usually by TCP / IP networking.
With this system, however, anyone lis
tening or "packet sniffing" on the network
can intercept the data communications. In
particular, they can capture user names
and passwords that can later be used fora
variety of purposes, most of which are not
condoned by the University.
Packet sniffing for passwords is difficult
to do manually for extended periods of
time. However, it can easily be automated,
especially on a large and open network such
as that at Stanford. It is almost certain that
one of these tools is operating at all times, es
pecially at commonly accessed network
points such as a main campus router.
Traditional programs are usually unen
crypted, which means that login information
cannot be decoded even if it is intercepted.
For the slightly paranoid user, it is inter
esting to note that the network connection is
still visible and quite a sufficient amount of
data can be gleaned from this alone. That is,
with an encrypted connection, it is still feasi
ble to determine where network traffic is

taking place and what type of service is
being used, even though the actual data is
inaccessible.
There are numerous technologies for
addressing this issue, but a popular solution
for secure data exchange is the Secure Shell
standard. Like encrypted communications,
this widely available tool allows for com
pression of data and tunneling. The tunnel
ing of information allows fora variety of ap
plications, including encrypted file transfer.
Also, it is not exceptionally difficult to
setup and administer Secure Shell from a
PC. If you are running Linux or any other
Unix program, including MacOS X, then
this is simply a matter of enabling the Se
cure Shell Daemon, a software program.
For more information on which flavors
of Unix are also supported, visit the
OpenSSH (a freely available server) page
at www.openssh.com/portable.html.
If you are using Windows NT or its deriv
atives such as Windows 2000 and Windows
XP, SSH can be enabled through OpenSSH
for Windows, available at www.networksim
plicity.com/openssn/.
After you have obtained and installed
the server, a few things are important to
note. First, OpenSSH for Windows is a
port of a Unix application and still has a
few Unix-like quirks. For example, the
server will need a password file. However,
the package does come with two utilities to
make creating files easier.
Also, Secure Shell will provide terminal
services, such as a command prompt, to an
authenticated user. Thus, it might be use
ful to create a dedicated user and poten
tially restricted user account for use with
the server. Even if the login becomes com
promised, it will have limited access.
Several clients for using Secure Shell in
Windows and other operating systems are
available. A comprehensive list is given at
openssh.linux.it/windows.html. Many are
freely available, such as TeraTerm SSH.
With the increasing speed of PCs, it is
now feasible to use a PC as a small personal
server, especially for sharing data and pro
grams across the network. Through the
clever use of a variety of freely available
tools, many originally from the Unix do
main, it is possible to easily configure a per
sonal computer for remote access.
However, this utility has increased the
necessity to secure network access. As a re
sult, many Leland system computers, for
example, are protected against unsecured
logins.
Most traditional programs for remote
control and data exchange, such as Tel
net, File Transfer Protocol and NetBIOS
— which is much like Windows Network
ing — send data in a standard format,
usually by TCP / IP networking.
With this system, however, anyone lis
tening or "packet sniffing" on the network
can intercept the data communications. In
particular, they can capture user names
and passwords that can later be used fora
variety of purposes, most of which are not
condoned by the University.
Packet sniffing for passwords is difficult
to do manually for extended periods of
time. However, it can easily be automated,
especially on a large and open network such
as that at Stanford. It is almost certain that
one of these tools is operating at all times, es
pecially at commonly accessed network
points such as a main campus router.
Traditional programs are usually unen
crypted, which means that login information
cannot be decoded even if it is intercepted.
For the slightly paranoid user, it is inter
esting to note that the network connection is
still visible and quite a sufficient amount of
data can be gleaned from this alone. That is,
with an encrypted connection, it is still feasi
ble to determine where network traffic is

taking place and what type of service is
being used, even though the actual data is
inaccessible.
There are numerous technologies for
addressing this issue, but a popular solution
for secure data exchange is the Secure Shell
standard. Like encrypted communications,
this widely available tool allows for com
pression of data and tunneling. The tunnel
ing of information allows fora variety of ap
plications, including encrypted file transfer.
Also, it is not exceptionally difficult to
setup and administer Secure Shell from a
PC. If you are running Linux or any other
Unix program, including MacOS X, then
this is simply a matter of enabling the Se
cure Shell Daemon, a software program.
For more information on which flavors
of Unix are also supported, visit the
OpenSSH (a freely available server) page
at www.openssh.com/portable.html.
If you are using Windows NT or its deriv
atives such as Windows 2000 and Windows
XP, SSH can be enabled through OpenSSH
for Windows, available at www.networksim
plicity.com/openssn/.
After you have obtained and installed
the server, a few things are important to
note. First, OpenSSH for Windows is a
port of a Unix application and still has a
few Unix-like quirks. For example, the
server will need a password file. However,
the package does come with two utilities to
make creating files easier.
Also, Secure Shell will provide terminal
services, such as a command prompt, to an
authenticated user. Thus, it might be use
ful to create a dedicated user and poten
tially restricted user account for use with
the server. Even if the login becomes com
promised, it will have limited access.
Several clients for using Secure Shell in
Windows and other operating systems are
available. A comprehensive list is given at
openssh.linux.it/windows.html. Many are
freely available, such as TeraTerm SSH.
With the increasing speed of PCs, it is
now feasible to use a PC as a small personal
server, especially for sharing data and pro
grams across the network. Through the
clever use of a variety of freely available
tools, many originally from the Unix do
main, it is possible to easily configure a per
sonal computer for remote access.
However, this utility has increased the
necessity to secure network access. As a re
sult, many Leland system computers, for
example, are protected against unsecured
logins.
Most traditional programs for remote
control and data exchange, such as Tel
net, File Transfer Protocol and NetBIOS
— which is much like Windows Network
ing — send data in a standard format,
usually by TCP / IP networking.
With this system, however, anyone lis
tening or "packet sniffing" on the network
can intercept the data communications. In
particular, they can capture user names
and passwords that can later be used fora
variety of purposes, most of which are not
condoned by the University.
Packet sniffing for passwords is difficult
to do manually for extended periods of
time. However, it can easily be automated,
especially on a large and open network such
as that at Stanford. It is almost certain that
one of these tools is operating at all times, es
pecially at commonly accessed network
points such as a main campus router.
Traditional programs are usually unen
crypted, which means that login information
cannot be decoded even if it is intercepted.
For the slightly paranoid user, it is inter
esting to note that the network connection is
still visible and quite a sufficient amount of
data can be gleaned from this alone. That is,
with an encrypted connection, it is still feasi
ble to determine where network traffic is

taking place and what type of service is
being used, even though the actual data is
inaccessible.
There are numerous technologies for
addressing this issue, but a popular solution
for secure data exchange is the Secure Shell
standard. Like encrypted communications,
this widely available tool allows for com
pression of data and tunneling. The tunnel
ing of information allows fora variety of ap
plications, including encrypted file transfer.
Also, it is not exceptionally difficult to
setup and administer Secure Shell from a
PC. If you are running Linux or any other
Unix program, including MacOS X, then
this is simply a matter of enabling the Se
cure Shell Daemon, a software program.
For more information on which flavors
of Unix are also supported, visit the
OpenSSH (a freely available server) page
at www.openssh.com/portable.html.
If you are using Windows NT or its deriv
atives such as Windows 2000 and Windows
XP, SSH can be enabled through OpenSSH
for Windows, available at www.networksim
plicity.com/openssn/.
After you have obtained and installed
the server, a few things are important to
note. First, OpenSSH for Windows is a
port of a Unix application and still has a
few Unix-like quirks. For example, the
server will need a password file. However,
the package does come with two utilities to
make creating files easier.
Also, Secure Shell will provide terminal
services, such as a command prompt, to an
authenticated user. Thus, it might be use
ful to create a dedicated user and poten
tially restricted user account for use with
the server. Even if the login becomes com
promised, it will have limited access.
Several clients for using Secure Shell in
Windows and other operating systems are
available. A comprehensive list is given at
openssh.linux.it/windows.html. Many are
freely available, such as TeraTerm SSH.
